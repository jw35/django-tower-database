# Generated by Django 5.2.6 on 2025-09-24 12:53

import database.models
import django.db.models.deletion
import multiselectfield.db.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('database', '0021_rename_week_tower_practice_weeks_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='tower',
            name='peals',
            field=models.PositiveIntegerField(blank=True, help_text='Peals in most recent Annual Report', null=True),
        ),
        migrations.AlterField(
            model_name='tower',
            name='practice_weeks',
            field=multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('4th', '4th'), ('5th', '5th'), ('Alt', 'Alt')], help_text="Week(s) of the month for main practice if not all [‘2nd, 5th’, 'alt']", max_length=50, validators=[database.models.Tower.week_validator]),
        ),
        migrations.AlterField(
            model_name='tower',
            name='primary_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tower_primary_set', to='database.contact'),
        ),
        migrations.CreateModel(
            name='HistoricalContact',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Contact name (with or without title), or role', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=100)),
                ('phone2', models.CharField(blank=True, help_text='Alternate phone number', max_length=100, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=100)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical contact',
                'verbose_name_plural': 'historical contacts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContactMap',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('role', models.CharField(choices=[('C', 'Other Contact'), ('TC', 'Tower Captai'), ('RM', 'Ringing Master'), ('SK', 'Steeplekeeper')], max_length=30)),
                ('publish', models.BooleanField(default=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='database.contact')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tower', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='database.tower')),
            ],
            options={
                'verbose_name': 'historical contact map',
                'verbose_name_plural': 'historical contact maps',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTower',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('place', models.CharField(help_text='Town or village containing the tower', max_length=100)),
                ('county', models.CharField(choices=[('C', 'Cambridgeshire'), ('N', 'Norfolk')], default='Cambridgeshire', max_length=100)),
                ('dedication', models.CharField(help_text='Church dedication. Use ‘St’ not ‘St.’; ‘and’ not ‘&’', max_length=100)),
                ('full_dedication', models.CharField(blank=True, max_length=100)),
                ('nickname', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(choices=[('C', 'Cambridge'), ('E', 'Ely'), ('H', 'Huntingdon'), ('W', 'Wisbech')], max_length=10)),
                ('include_dedication', models.BooleanField(default=False, help_text='For places with more than one tower [Cambridge], or for towers in different places that have the same name [Chesterton])')),
                ('ringing_status', models.CharField(blank=True, choices=[('R', 'Regular'), ('O', 'Occasional'), ('N', 'None')], help_text='Full-circle ringing status', max_length=20)),
                ('report', models.BooleanField(default=False, verbose_name='In annual report?')),
                ('service', models.CharField(blank=True, help_text='Short description of normal service ringing. No initial capital (unless day of week)', max_length=200, validators=[database.models.Tower.time_validator])),
                ('practice', models.CharField(blank=True, help_text='Short description of normal practice ringing. No initial capital (unless day of week)', max_length=200, validators=[database.models.Tower.time_validator])),
                ('practice_day', models.CharField(blank=True, choices=[('Mon', 'Monday'), ('Tue', 'Tuesday'), ('Wed', 'Wednesday'), ('Thu', 'Thursday'), ('Fri', 'Friday'), ('Sat', 'Saturday'), ('Sun', 'Sunday')], help_text='Day of the week of main practice', max_length=9)),
                ('practice_weeks', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('1st', '1st'), ('2nd', '2nd'), ('3rd', '3rd'), ('4th', '4th'), ('5th', '5th'), ('Alt', 'Alt')], help_text="Week(s) of the month for main practice if not all [‘2nd, 5th’, 'alt']", max_length=50, validators=[database.models.Tower.week_validator])),
                ('travel_check', models.BooleanField(default=False, help_text='Check before travelling to practices?')),
                ('bells', models.PositiveIntegerField(blank=True, help_text='Number of ringable bells', null=True, validators=[database.models.Tower.bell_validator])),
                ('ring_type', models.CharField(blank=True, choices=[('Full', 'Full-circle ring'), ('Light', 'Lightweight ring'), ('Carillon', 'Carillon'), ('C-chine', 'Clock chime'), ('T-chime', 'Tubular chime'), ('H-chinme', 'Hemispherical chime'), ('Chime', 'Chime'), ('Display', 'Display bells'), ('Future', 'Future ring'), ('Other', 'Other bells')], max_length=20)),
                ('weight', models.CharField(blank=True, help_text='Use ‘15-3-13’ or ‘6cwt’', max_length=50, validators=[database.models.Tower.weight_validator])),
                ('note', models.CharField(blank=True, help_text='Use ‘b’ and ‘#’', max_length=10, validators=[database.models.Tower.note_validator])),
                ('gf', models.BooleanField(blank=True, null=True, verbose_name='Ground Floor?')),
                ('os_grid', models.CharField(blank=True, max_length=8, validators=[database.models.Tower.grid_validator], verbose_name='OS Grid')),
                ('postcode', models.CharField(blank=True, max_length=10, validators=[database.models.Tower.postcode_validator])),
                ('lat', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('lng', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('contact_use', models.CharField(choices=[('All', 'All'), ('Bells only', 'Bells Only'), ('Band only', 'Band Only'), ('None', 'None')], default='All', help_text='Intended use of contact details', max_length=10)),
                ('peals', models.PositiveIntegerField(blank=True, help_text='Peals in most recent Annual Report', null=True)),
                ('dove_towerid', models.CharField(blank=True, max_length=10, verbose_name='Dove TowerID')),
                ('dove_ringid', models.CharField(blank=True, max_length=10, verbose_name='Dove RingID')),
                ('towerbase_id', models.CharField(blank=True, max_length=10, verbose_name='Towerbase ID')),
                ('notes', models.CharField(blank=True, help_text='For display, especially in the Annual Report', max_length=100)),
                ('long_notes', models.TextField(blank=True, help_text='For display when space isn’t at a premium')),
                ('maintainer_notes', models.TextField(blank=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('primary_contact', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='database.contact')),
            ],
            options={
                'verbose_name': 'historical tower',
                'verbose_name_plural': 'historical towers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWebsite',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('website', models.URLField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tower', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='database.tower')),
            ],
            options={
                'verbose_name': 'historical website',
                'verbose_name_plural': 'historical websites',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
